#!/bin/sh


# the inputs that contribute to power management are:
#   switches (which appear as events on /dev/input/event[012]:
#       power button
#       ebook
#       lid
#
#   conditions:
#       AC input (boolean)
#       battery level (numeric)
#
#   wakeups
#       ac_power
#       battery_error
#       battery_soc
#       battery_state
#       ebook_mode_change
#       ps2event
#       wlan
#
#   user activity/idleness
#
#   other system activity (cpu load, network load, etc)


RUNDIR=/var/run

PROJECTDIR=/home/olpc/src/powerd
IMAGES=$PROJECTDIR
PPMTOFB=/home/olpc/bin/ppmtofb
LOGFILE=$PROJECTDIR/powerd.log

FIFO=$RUNDIR/powerevents

# i'd use /sys/.../capacity_level here, but we never hit "critical" --
# we only get to "low", which then lasts for another half hour.
# using /sys/.../capacity (which gives a percentage), and cutting
# off at 5% means we're shutting down with (on my machine and
# battery under 2 minutes of runtime left.  close enough for jazz...
CAPACITY=/sys/class/power_supply/olpc-battery/capacity
AC_ONLINE=/sys/class/power_supply/olpc-ac/online  # 1 / 0
WAKEUP_EVENTS=/sys/power/wakeup_events
WAKEUP_SOURCE=/sys/power/wakeup-source

CONFIGFILE=/etc/powerd.conf
CONFIGFILE=$PROJECTDIR/powerd.conf

USER_ACTIVITY=/var/run/olpc-kbdshim_activity

BRIGHTNESS=/sys/class/backlight/dcon-bl/brightness

set -u


yes_or_true()
{
    test "$1" || return 1

    case $1 in
    [yYtT]*) return 0 ;;
    *)     return 1 ;;
    esac
}

splash()
{
    case $1 in
    confirm)  text="Please confirm: will suspend in 5 seconds, press the power button again to power off" ;;
    shutting) text="Shutting down, please wait..." ;;
    critical) text="Battery level CRITICAL, shutting down..." ;;
    esac

    unsplash
    openvt -s -w -- dialog --sleep 999999 --infobox "$text" 11 40 &
    #chvt 4
    #dialog --sleep 999999 --infobox "$text" 11 40 &

}

unsplash()
{
    killall -q dialog
}

do_shutdown()
{
    # echo would shutdown -h now
    /sbin/shutdown -h now
}

check_battery()
{
    read capacity < $CAPACITY
    case $capacity in
    [54321])
        splash critical
        do_shutdown
        ;;
    esac
}

cpu_activity()
{
    return 0
}

network_activity()
{
    return 0
}

laptop_idle()
{
    if ! cpu_activity && ! network_activity
    then
        catnap
    fi
}

wlan_power()
{
    local wlp
    echo  1
    return
    if [ "${1:-}" ]
    then
	echo $1 >/sys/power/wlan-enabled
    else
	read wlp < /sys/power/wlan-enabled
	echo $wlp
    fi
}

slumber()
{
    set_wakeups none
    wlp=$(wlan_power)
    wlan_power 0
    echo 1   >/sys/devices/platform/dcon/sleep 
    echo mem >/sys/power/state
    set_wakeups all
    echo 0   >/sys/devices/platform/dcon/sleep 
    wlan_power $wlp
    unsplash
    reevaluate
    set_idletimes
}

catnap()
{
    wlp=$(wlan_power)
    yes_or_true "$config_MESH_or_WAKE_ON_WAN" || wlan_power $wlp
    while :
    do
        echo mem >/sys/power/state
        read wakeupsource <$WAKEUP_SOURCE
        : wakeupsource is $wakeupsource
        case $wakeupsource in
        "lid") 
            selfinject useractive2
            break
            ;;

        "key press")
            selfinject useractive2
            break
            ;;

        "power button")
            selfinject power $(date +%s)
            break
            ;;

        "ebook")
            selfinject useractive2
            ;;

        "wlan packet")
            if yes_or_true "$config_MESH_or_WAKE_ON_WAN"
            then
        	selfinject useractive2
                break
            fi
            ;;
        esac
    done
    wlan_power $wlp
    set_idletimes
}

brightness()
{
    echo $1 >$BRIGHTNESS
}

brightness_ramp()
{
    local i
    test $1 = $2 && return

    incr=1
    test $1 -gt $2 && incr=-1

    i=$1
    while :
    do
	let i=i+$incr
	test $i = $2 && break
	brightness $i
	usleep 20000
    done
}

backlight()
{
    case $1 in
    restore)
        if [ "$dimmed" -a "$savebright" ]
	then
	    #brightness $savebright
	    read curbright <$BRIGHTNESS
	    brightness_ramp $curbright $savebright
	    dimmed=;
	fi
        ;;
    dim)
        if [ ! "${dimmed}" ]
	then
	    read savebright <$BRIGHTNESS
	    brightness_ramp $savebright $config_IDLEDIM
	    dimmed=true
	fi
        ;;
    off)
        if [ ! "${dimmed}" ]
	then
	    read savebright <$BRIGHTNESS
	    brightness 0
	fi
        ;;
    esac
}

set_wakeups()
{
    case $1 in
    # setting "all" to 1/0 sets/clears everything else at once,
    # i.e.,  ac_power battery_error battery_soc battery_state 
    #       ebook_mode_change ps2event wlan"
    all) val=1 ;;
    none) val=0 ;;
    esac

    echo $val >$WAKEUP_EVENTS/all

}

default_config()
{
    config_EBOOK_IDLETIMES="10 15 240"
    config_IDLETIMES="120 130 240"
    config_IDLEDIM=5
    config_SOLAR=no
    config_ALWAYSON=no
    config_MESH_or_WAKE_ON_WAN=yes
} 

read_config()
{

    source $CONFIGFILE

}

check_acstate()
{
    read on_ac < $AC_ONLINE
    if [ "$on_ac" = 1 ]
    then
        savepower=;
        yes_or_true ${config_SOLAR} && savepower=true;
        yes_or_true ${config_ALWAYSON} && savepower=;
    else
        savepower=true;
        yes_or_true ${config_ALWAYSON} && savepower=;
    fi
}

set_idletimes()
{
    if [ "$am_ebook" ]
    then
            idletimes=${config_EBOOK_IDLETIMES}
    else
            idletimes=${config_IDLETIMES}
    fi
    if [ "${1:-}" != ifchanged -o "$idletimes" != "${last_idletimes}" ]
    then
        echo "I $idletimes" >/var/run/olpc-kbdshim_rotate
    fi
    last_idletimes="$idletimes"
}

reevaluate()
{
    check_acstate
}

selfinject()
{
    echo $* >$FIFO
}

sched_timer()
{
    (sleep $1; shift 1; selfinject timerdone $*) &
}


dcon_freeze()
{
    echo $1 > /sys/devices/platform/dcon/freeze
}

event_loop()
{
    local event arg1 arg2 more idletimes lastpowerpress timerseqno

    lastpowerpress=0;
    timerseqno=0;

    idletimes=${config_IDLETIMES:-"120 130 240"}

    set -x
    exec 2>>$LOGFILE
    : starting eventloop

    check_acstate
    set_idletimes

    trap "unsplash; exit" 1 2 3 15
    unsplash

    # recreate to flush, and to make sure it's a fifo
    rm -f $FIFO
    mkfifo $FIFO

    while :
    do
	set_idletimes ifchanged

        if ! read -t 10 event arg1 arg2 more
        then
            event=timeout
        fi

        : -------------------------
        : got $event arg1 ${arg1:-n/a}

        case $event in

        power)
            am_idle=;
            now=$arg1
            if [ $(( $now - $lastpowerpress )) -ge 5 ]
            then # first press
                splash confirm
                set_idletimes   # reprime for "useractivity"
                let timerseqno=timerseqno+1
                sched_timer 6 $timerseqno gotosleep
            else # second press
                splash shutting
                dcon_freeze 1
                do_shutdown
            fi
            lastpowerpress=$now
            ;;

        timerdone)
            if [ "$timerseqno" = "$arg1" ]
            then
                echo $arg2 >$FIFO
            fi
            ;;

        lidclose|gotosleep)
            am_idle=;
            unsplash
            # xset dpms force off
            backlight off
            slumber
            ;;

        lidopen)
            am_idle=;
            unsplash
            # xset dpms 0 0 0
            # xset dpms force on
            backlight restore
            ;;

        ebookclose)
            am_idle=;
            am_ebook=true
            ;;

        ebookopen)
            am_idle=;
            am_ebook=;
            ;;

        useractive*)
            lastpowerpress=0  #invalidate outstanding power button timers
            let timerseqno=timerseqno+1  # as well as timerdone messages
            unsplash
            backlight restore
            am_idle=;
	    test "$event" = useractive2 && set_idletimes
            ;;

        useridle1)
            am_idle=1
            if [ "$savepower" -a ! "$am_ebook" ]
            then
                backlight dim
            fi
            ;;

        useridle2)
            am_idle=2
            if [ "$savepower" ] && laptop_idle
            then
                catnap
            fi
            ;;

        useridle3)
            am_idle=3
            ;;

        timeout)
            osavepower=$savepower
            check_battery
            check_acstate
            if [ "$savepower" -a ! "$osavepower" ]
            then
                # this will force a restart of the timers,
                # so we'll go through the useridle1/2 cycle again
                set_idletimes
            fi
            ;;

	reconfig)
	    read_config
	    ;;

        esac
    done <> $FIFO
}


default_config
read_config
am_ebook=;
dimmed=;
savebright=;
last_idletimes=;

set_wakeups all

event_loop

