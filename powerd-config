#!/bin/sh

# CONFIGDIR=/home/olpc/src/powerd/testconf
CONFIGDIR=/etc/powerd/conf
CONFIGLINK=$CONFIGDIR/powerd.conf

TMP=/tmp/powerdconfig.$$


trap "rm -f $TMP $TMPCONFIG $NEWCONFIG" 0

# set -e

backtitle="powerd configuration"


yes_or_true()
{
    case $1 in
    [yYtT]*) echo on; return ;;
    esac

    echo off
}

deref()
{
    for x; do
        echo ${!x}   # or more portably: eval echo \$$x
    done
}

configvarname()
{
    m=$m
    test "$m" && u=_
    v=$1
    echo config${u}${m}_${v}
}

config()
{
    deref $(configvarname $1)
}

setvar()
{
    varname=$(configvarname $1)
    val=$2

    grep -v "^$varname=" $TMPCONFIG >$NEWCONFIG
    echo $varname="\"$val\"" >>$NEWCONFIG
    mv $NEWCONFIG $TMPCONFIG
}



display_profile()
{
    dialog --yesno \
	"$(echo Profile \'$1\' contains:; \
	    echo; \
	    sed -n 's/^config_.*/   &/p' $CONFIGDIR/$1;
	    echo; \
	    echo Okay to activate? )" 0 0
}


edit_profile()
{

    CONFIG=$CONFIGDIR/$1

    TMPCONFIG=$CONFIG.tmp
    NEWCONFIG=$TMPCONFIG.new

    cp $CONFIG $TMPCONFIG

    source $TMPCONFIG

    solar=$(yes_or_true $(config SOLAR))
    alwayson=$(yes_or_true $(config ALWAYSON))
    normal=off
    test "$solar" = off -a $alwayson = off && normal=on

    if ! dialog \
	--backtitle "$backtitle" \
	--radiolist "Power usage" 0 0 0 \
	    "normal" \
		"Save battery power, but run at full power when plugged in" \
		$normal \
	    "solar" \
		"Save both external and battery power" \
		$solar \
	    "full" \
		"Run at full power at all times (No dim, sleep, or shutdown)"  \
		$alwayson \
	2>$TMP
    then
	rm $TMPCONFIG
	return 1
    fi

    read got junk < $TMP

    setvar SOLAR false
    setvar ALWAYSON false
    case $got in
    normal) ;;
    solar) setvar SOLAR true ;;
    full)  setvar ALWAYSON true ;;
    esac

    wake=$(yes_or_true $(config MESH_or_WAKE_ON_WLAN))
    use_ebook=$(yes_or_true $(config USE_EBOOK_PROFILE))

    if ! dialog \
	--backtitle "$backtitle" \
	--separate-output --checklist "Options" 0 0 0 \
	    "wlanwake" \
		"Leave WLAN enabled when sleeping" \
		$wake \
	    "ebookconfig" \
		"Switch to 'ebook' config profile automatically in ebook mode" \
		$use_ebook \
	2>$TMP
    then
	rm $TMPCONFIG
	return 1
    fi

    setvar MESH_or_WAKE_ON_WLAN false
    setvar USE_EBOOK_PROFILE false
    while read got junk
    do
	case $got in
	wlanwake) setvar MESH_or_WAKE_ON_WLAN true;;
	ebookconfig) setvar USE_EBOOK_PROFILE true ;;
	esac
    done < $TMP



    dim=$(config TIME_DIM)
    sleep=$(config TIME_SLEEP)
    blank=$(config TIME_BLANK)
    shut=$(config TIME_SHUTDOWN)

    if ! dialog \
	  --backtitle "$backtitle" --form \
	    "Idle timeouts -- either Sleep or Blank may occur first" 0 0 4 \
	    "Dim:"         1 1      "$dim"    1  11 9 9 \
      "Sleep:"       2 1      "$sleep"  2  11 9 9 \
			    "Blank:"       2 25     "$blank"  2  35 9 9 \
	    "Shutdown:"    3 1      "$shut"   3  11 9 9 \
    2>$TMP
    then
	rm $TMPCONFIG
	return 1
    fi

    set -- $(cat $TMP)
    setvar TIME_DIM $1
    setvar TIME_SLEEP $2
    setvar TIME_BLANK $3
    setvar TIME_SHUTDOWN $4


    for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
    do
	eval r${i}=off
    done
    eval r${config_IDLEDIM}=on

    if ! dialog \
	--radiolist "Dim level" 0 0 0 \
	   15 "" "$r15" \
	   14 "" "$r14" \
	   13 "" "$r13" \
	   12 "" "$r12" \
	   11 "" "$r11" \
	   10 "" "$r10" \
	    9 "" "$r9" \
	    8 "" "$r8" \
	    7 "" "$r7" \
	    6 "" "$r6" \
	    5 "" "$r5" \
	    4 "" "$r4" \
	    3 "" "$r3" \
	    2 "" "$r2" \
	    1 "" "$r1" \
	  off "" "$r0" \
	2>$TMP
    then
	rm $TMPCONFIG
	return 1
    fi

    setvar IDLEDIM $(cat $TMP)

    seconds=$config_CONFIRM_SECONDS
    if ! dialog \
	  --backtitle "$backtitle" \
	  --form "Shutdown confirmation delay" 0 0 1 \
	"Seconds between power button presses:"   1 1 "$seconds"  1  45 3 3 \
	2>$TMP
    then
	rm $TMPCONFIG
	return 1
    fi

    read got junk < $TMP
    setvar CONFIRM_SECONDS "$got"

    mv $TMPCONFIG $CONFIG

    return 0

}

check_root()
{
    if [ "$(whoami)" != root ]
    then
	dialog \
	    --backtitle "$backtitle" \
	    --msgbox \
	    "You must be root to run this configuration program" 0 0
	exit 1
    fi
}

select_profile()
{
    profiles=$(ls -F $CONFIGDIR | grep '^[-a-zA-Z_]*$')
    curprofile=$(readlink $CONFIGLINK)

    profilelist=;
    for p in $profiles
    do
       profilelist="$profilelist $p -"
    done

    dialog \
	--backtitle "$backtitle" \
	--default-item $curprofile \
	--extra-button \
	--extra-label Edit \
	--menu "Select a profile (to use or edit and then use)" 0 0 0 \
	$profilelist \
	2>$TMP
    ret=$?

    read workingprofile < $TMP

    return $ret
}

activate_profile()
{
    echo reconfig $1 >/var/run/powerevents
}

main()
{

    case $1 in
    -*)
	(
	echo "usage: ${0##*/} [ profile-name ]"
	echo "will activate 'profile-name' if given,"
	echo "or bring up interactive selection/edit dialogs."
	) >&2
	exit 1
	;;
    esac

    if [ "$1" ]
    then
	if [ ! -r "$1" ]
	then
	    echo ${0##*/} profile $1 not readable
	    exit 1
	fi
	activate_profile $1
	exit
    fi

    check_root

    while :
    do
	select_profile
	selectret=$?

	case $selectret in
	3|0)  ;;
	*)  exit 1 ;;
	esac

	test "$workingprofile" -a -e $CONFIGDIR/$workingprofile || continue

	case $selectret in
	3)  edit_profile $workingprofile && break
	    ;;
	0)  break
	    ;;
	esac
    done


    display_profile $workingprofile || exit 0

    activate_profile $workingprofile
}


main "$@"
