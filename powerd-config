#!/bin/sh
#
# primitive configurator for powerd.
#
# can be used from the commandline to activate a profile,
# otherwise, will bring up a series of dialog-based config
# screens to let you select and edit a profile.
#
#
# Copyright (C) 2009, Paul G Fox
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
# USA.
#

usage()
{
        (
        echo "usage: ${0##*/} [ profile-name ]"
        echo "will activate 'profile-name' if given,"
        echo "or bring up interactive selection/edit dialogs."
        ) >&2
        exit 1
}

# CONFIGDIR=/home/olpc/src/powerd/testconf
CONFIGDIR=/etc/powerd/conf
CONFIGLINK=$CONFIGDIR/curconfig.link

TMP=/tmp/powerdconfig.$$


trap "rm -f $TMP $TMPCONFIG $NEWCONFIG" 0

backtitle="powerd configuration"

yes_or_true()
{
    case $1 in
    [yYtT]*) echo on; return ;;
    esac

    echo off
}

deref()
{
    for x; do
        echo ${!x}   # or more portably: eval echo \$$x
    done
}

configvarname()
{
    m=$m
    test "$m" && u=_
    v=$1
    echo config${u}${m}_${v}
}

config()
{
    deref $(configvarname $1)
}

setvar()
{
    varname=$(configvarname $1)
    val=$2

    grep -v "^$varname=" $TMPCONFIG >$NEWCONFIG
    echo $varname="\"$val\"" >>$NEWCONFIG
    mv $NEWCONFIG $TMPCONFIG
}


display_profile()
{
    
    dialog --yesno \
        "$(echo Profile \'$1\' contains:; \
            echo; \
                sed  \
                   -e 's/^config_TIME_DIM=/  1) Seconds until the screen dims: /' \
                   -e 's/^config_TIME_SLEEP=/  2) Seconds until the laptop sleeps: /' \
                   -e 's/^config_TIME_BLANK=/  3) Seconds until the screen blanks: /' \
                   -e 's/^config_MAX_SLEEP=/  4) How long the laptop will ever sleep before shutting down: /' \
                   -e 's/^config_IDLEDIM=/  5) How far to dim the screen when idle: /' \
                   -e 's/^config_SOLAR=/  6) Conserve external power: /' \
                   -e 's/^config_MESH_or_WAKE_ON_WLAN=/  7) Try and keep the wireless active: /' \
                   -e 's/^config_ALWAYSON=/  8) Run without saving power, even on battery: /' \
                   -e 's/^config_USE_EBOOK_PROFILE=/  9) Use '\''ebook'\'' profile when folded as ebook: /' \
                   -e 's/^config_CONFIRM_SECONDS=/ 10) Seconds to wait for a second power button press to shut down: /' \
                   -e 's/\<n\>/no/' \
                   -e 's/\<y\>/yes/' \
                   -e 's/\<false\>/no/' \
                   -e 's/\<true\>/yes/' \
                   -e 's/\"/ /g' \
                   -e 's/^/   /' \
                   -e '/^[[:space:]]*#.*/d' \
                   -e '/^[[:space:]]*$/d' \
            $CONFIGDIR/$1 | sort -n
            echo; \
            echo Okay to activate? \
        )" 0 0
}


edit_profile()
{

    CONFIG=$CONFIGDIR/$1

    TMPCONFIG=$CONFIG.tmp
    NEWCONFIG=$TMPCONFIG.new

    cp $CONFIG $TMPCONFIG

    source $TMPCONFIG

    solar=$(yes_or_true $(config SOLAR))
    alwayson=$(yes_or_true $(config ALWAYSON))
    normal=off
    test "$solar" = off -a $alwayson = off && normal=on

    if ! dialog \
        --backtitle "$backtitle" \
        --radiolist "Power usage" 0 0 0 \
            "normal" \
                "Save battery power, but run at full power when plugged in" \
                $normal \
            "solar" \
                "Save both external and battery power" \
                $solar \
            "full" \
                "Run at full power at all times (No dim, sleep, or shutdown)"  \
                $alwayson \
        2>$TMP
    then
        rm $TMPCONFIG
        return 1
    fi


    setvar SOLAR false
    setvar ALWAYSON false

    read got junk < $TMP
    case $got in
    normal) ;;
    solar) setvar SOLAR true ;;
    full)  setvar ALWAYSON true ;;
    esac

    wake=$(yes_or_true $(config MESH_or_WAKE_ON_WLAN))
    use_ebook=$(yes_or_true $(config USE_EBOOK_PROFILE))

    if ! dialog \
        --backtitle "$backtitle" \
        --separate-output --checklist "Options" 0 0 0 \
            "wlanwake" \
                "Leave WLAN enabled when sleeping" \
                $wake \
            "ebookconfig" \
                "Switch to 'ebook' config profile automatically in ebook mode" \
                $use_ebook \
        2>$TMP
    then
        rm $TMPCONFIG
        return 1
    fi

    setvar MESH_or_WAKE_ON_WLAN false
    setvar USE_EBOOK_PROFILE false
    while read got junk
    do
        case $got in
        wlanwake) setvar MESH_or_WAKE_ON_WLAN true;;
        ebookconfig) setvar USE_EBOOK_PROFILE true ;;
        esac
    done < $TMP



    dim=$(config TIME_DIM)
    sleep=$(config TIME_SLEEP)
    blank=$(config TIME_BLANK)
    maxsleep=$(config MAX_SLEEP)

    test "$dim" -eq "$dim" || dim=120
    test "$sleep" -eq "$sleep" || sleep=$(( dim + 60 ))
    test "$blank" -eq "$blank" || blank=$(( dim + 600 ))
    test "$maxsleep" -eq "$maxsleep" || maxsleep=$(( 3600 ))

    if [ $sleep -gt $blank ]
    then
        shut=$(( shut - sleep ))
    else
        shut=$(( shut - blank ))
    fi

    if ! dialog \
          --backtitle "$backtitle" --form \
            "Idle timeouts -- either Sleep or Blank may occur first" 0 0 4 \
            "Dim:"         1 1      "$dim"    1  11 9 9 \
      "Sleep:"       2 1      "$sleep"  2  11 9 9 \
                           "Blank:"       2 25     "$blank"  2  35 9 9 \
      "How long a sleep lasts before shutdown:"    4 1      "$shut"   4  35 9 9 \
	2>$TMP
    then
        rm $TMPCONFIG
        return 1
    fi

    set -- $(cat $TMP)
    dim=$1
    sleep=$2
    blank=$3
    maxsleep=$4

    test "$dim" -eq "$dim" || dim=120
    test "$sleep" -eq "$sleep" || sleep=$(( dim + 60 ))
    test "$blank" -eq "$blank" || blank=$(( dim + 600 ))

    test "$maxsleep" -eq "$maxsleep" || maxsleep=$(( 3600 ))

    setvar TIME_DIM $dim
    setvar TIME_SLEEP $sleep
    setvar TIME_BLANK $blank
    setvar MAX_SLEEP $maxsleep

    for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
    do
        eval r${i}=off
    done
    eval r${config_IDLEDIM}=on

    if ! dialog \
        --radiolist "Dim level" 0 0 0 \
           15 "" "$r15" \
           14 "" "$r14" \
           13 "" "$r13" \
           12 "" "$r12" \
           11 "" "$r11" \
           10 "" "$r10" \
            9 "" "$r9" \
            8 "" "$r8" \
            7 "" "$r7" \
            6 "" "$r6" \
            5 "" "$r5" \
            4 "" "$r4" \
            3 "" "$r3" \
            2 "" "$r2" \
            1 "" "$r1" \
          off "" "$r0" \
        2>$TMP
    then
        rm $TMPCONFIG
        return 1
    fi

    setvar IDLEDIM $(cat $TMP)

    seconds=$config_CONFIRM_SECONDS
    if ! dialog \
          --backtitle "$backtitle" \
          --form "Shutdown confirmation delay" 0 0 1 \
        "Seconds between power button presses:"   1 1 "$seconds"  1  45 3 3 \
        2>$TMP
    then
        rm $TMPCONFIG
        return 1
    fi

    read got junk < $TMP
    setvar CONFIRM_SECONDS "$got"

    mv $TMPCONFIG $CONFIG

    return 0

}

check_root()
{
    if [ "$(whoami)" != root ]
    then
        dialog \
            --backtitle "$backtitle" \
            --msgbox \
            "You must be root to run this configuration program" 0 0
        exit 1
    fi
}

select_profile()
{
    profiles=$(ls -F $CONFIGDIR | grep '^[-a-zA-Z_]*$')
    curprofile=$(readlink $CONFIGLINK)

    profilelist=;
    for p in $profiles
    do
       profilelist="$profilelist $p -"
    done

    dialog \
        --backtitle "$backtitle" \
        --default-item $curprofile \
        --extra-button \
        --extra-label Edit \
        --menu "Select a profile (to use or edit and then use)" 0 0 0 \
        $profilelist \
        2>$TMP
    ret=$?

    read workingprofile < $TMP

    return $ret
}

activate_profile()
{
    echo reconfig $1 >/var/run/powerevents
}

main()
{

    case $1 in
    -*) # we have no -options
        usage
        ;;
    =*) # =foo not really a profile; it's a direct event to the daemon,
        #  with the '=' removed.
        echo ${1#=} >/var/run/powerevents
        exit 0
        ;;
    esac

    if [ "$1" ]
    then
        if [ ! -r $CONFIGDIR/"${1##*/}" ]
        then
            echo "${0##*/} profile $1 (in $CONFIGDIR) not readable" >&2
            exit 1
        fi
        activate_profile ${1##*/}
        exit
    fi

    if ! type dialog 2>/dev/null
    then
        (
        echo "${0##*/}: the 'dialog' program isn't available, quitting."
        echo "  Use a text editor to edit profiles under $CONFIGDIR,"
        echo "  and (re)activate them with: '${0##*/} profilename'"
        echo "  (Or use 'sudo yum install dialog' to install the package.)"
        ) >&2
        exit 1
    fi

    check_root

    while :
    do
        select_profile
        selectret=$?

        case $selectret in
        3|0)  ;;
        *)  exit 1 ;;
        esac

        test "$workingprofile" -a -e $CONFIGDIR/$workingprofile || continue

        case $selectret in
        3)  edit_profile $workingprofile && break
            ;;
        0)  break
            ;;
        esac
    done


    display_profile $workingprofile || exit 0

    activate_profile $workingprofile
}


main "$@"
