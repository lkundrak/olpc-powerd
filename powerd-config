#!/bin/sh
#
# primitive configurator for powerd.
#
# can be used from the commandline to activate a profile,
# otherwise, will bring up a series of dialog-based config
# screens to let you select and edit a profile.
#
#
# Copyright (C) 2009, Paul G Fox
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
# USA.
#

set -u

#exec 2>pc.log
#set -x

usage()
{
        (
        echo "usage: ${0##*/} [ profile-name ]"
        echo "will activate 'profile-name' if given,"
        echo "or bring up interactive selection/edit dialogs."
        ) >&2
        exit 1
}

# CONFIGDIR=/tmp
CONFIGDIR=/etc/powerd
CONFIGFILE=$CONFIGDIR/powerd.conf
TMPCONFIG=$CONFIGFILE.tmp
NEWCONFIG=$TMPCONFIG.new

TMP=/tmp/powerdconfig.$$


trap "rm -f $TMP $TMPCONFIG $NEWCONFIG" 0

backtitle="powerd configuration"

yes_no()
{
    case $1 in
    1|[yYtT]*)  echo yes  ;;
    *)		echo no   ;;
    esac
}

setvar()
{
    varname=$1
    val=$2

    grep -v "^$varname=" $TMPCONFIG >$NEWCONFIG
    echo $varname="\"$val\"" >>$NEWCONFIG
    mv $NEWCONFIG $TMPCONFIG
}

edit_config()
{

    source $1

    bat_dim=$config_BATTERY_TIME_DIM
    bat_sleep=$config_BATTERY_TIME_SLEEP
    bat_blank=$config_BATTERY_TIME_BLANK

    # force numeric, and reasonable defaults
    test "$bat_dim" -eq "$bat_dim" || bat_dim=120
    test "$bat_sleep" -eq "$bat_sleep" || bat_sleep=$(( bat_dim + 120 ))
    test "$bat_blank" -eq "$bat_blank" || bat_blank=$(( bat_dim + 240 ))


    ebook_dim=${config_EBOOK_TIME_DIM:-120}
    ebook_sleep=${config_EBOOK_TIME_SLEEP:-240}
    ebook_blank=${config_EBOOK_TIME_BLANK:-480}

    # force numeric, and reasonable defaults
    test "$ebook_dim" -eq "$ebook_dim" || ebook_dim=120
    test "$ebook_sleep" -eq "$ebook_sleep" || ebook_sleep=$(( ebook_dim + 120 ))
    test "$ebook_blank" -eq "$ebook_blank" || ebook_blank=$(( ebook_dim + 240 ))

    plugged_dim=${config_PLUGGED_TIME_DIM:-120}
    plugged_sleep=${config_PLUGGED_TIME_SLEEP:-240}
    plugged_blank=${config_PLUGGED_TIME_BLANK:-480}

    # force numeric, and reasonable defaults
    test "$plugged_dim" -eq "$plugged_dim" || plugged_dim=120
    test "$plugged_sleep" -eq "$plugged_sleep" || plugged_sleep=$(( plugged_dim + 120 ))
    test "$plugged_blank" -eq "$plugged_blank" || plugged_blank=$(( plugged_dim + 240 ))

    idledim=$config_IDLE_DIM_LEVEL
    test "$idledim" -eq "$idledim" || idledim=5

    wlanwake=${config_WAKE_ON_WLAN:-yes}
    maxsleep=${config_MAX_SLEEP_BEFORE_SHUTDOWN:-3600}
    test "$maxsleep" -eq "$maxsleep" || maxsleep=5
    noshut=${config_NO_SHUTDOWN_WHEN_PLUGGED:-no}

    splashdelay=${config_CONFIRM_SECONDS:-8}

    row=1
    if ! dialog \
          --backtitle "$backtitle" --form \
            "Note: Dim must happen first, but either Sleep or Screen Blank may be scheduled next." \
	    22 60 15 \
      \
            "Battery:     Dim"         1 1      "$bat_dim"    1  18 9 9 \
      "Sleep"       2 12      "$bat_sleep"  2  18 9 9 \
                           "Blank"       2 28     "$bat_blank"  2  34 9 9 \
            "Ebook:       Dim"         3 1      "$ebook_dim"    3  18 9 9 \
      "Sleep"       4 12      "$ebook_sleep"  4  18 9 9 \
                           "Blank"       4 28     "$ebook_blank"  4  34 9 9 \
            "Plugged in:  Dim"         5 1      "$plugged_dim"    5  18 9 9 \
      "Sleep"       6 12      "$plugged_sleep"  6  18 9 9 \
                           "Blank"       6 28     "$plugged_blank"  6  34 9 9 \
      \
      "Screen brightness (0-15) when dimmed:"    8 1      "$idledim"   8  43 3 3 \
      \
      "Wake on wireless activity?"    10 1      "$wlanwake"   10  41 5 5 \
      \
      "Max sleep before laptop shuts down:"    12 1      "$maxsleep"   12  37 9 9 \
      "Prevent shutdown when plugged in?"    13 1      "$noshut"   13  41 5 5 \
      \
      "Power button splash screen timeout:"   15 1 "$splashdelay"  15  43 3 3 \
	2>$TMP
    then
        rm $TMPCONFIG
        return 1
    fi

    set -- $(cat $TMP)
    bat_dim=$1
    bat_sleep=$2
    bat_blank=$3
    ebook_dim=$4
    ebook_sleep=$5
    ebook_blank=$6
    plugged_dim=$7
    plugged_sleep=$8
    plugged_blank=$9
    idledim=${10}
    wlanwake=${11}
    maxsleep=${12}
    noshut=${13}
    splashdelay=${14}

    setvar config_BATTERY_TIME_DIM $bat_dim
    setvar config_BATTERY_TIME_SLEEP $bat_sleep
    setvar config_BATTERY_TIME_BLANK $bat_blank
    setvar config_EBOOK_TIME_DIM $ebook_dim
    setvar config_EBOOK_TIME_SLEEP $ebook_sleep
    setvar config_EBOOK_TIME_BLANK $ebook_blank
    setvar config_PLUGGED_TIME_DIM $plugged_dim
    setvar config_PLUGGED_TIME_SLEEP $plugged_sleep
    setvar config_PLUGGED_TIME_BLANK $plugged_blank

    setvar config_IDLE_DIM_LEVEL $idledim
    setvar config_WAKE_ON_WLAN $(yes_no $wlanwake)
    setvar config_MAX_SLEEP_BEFORE_SHUTDOWN $maxsleep
    setvar config_NO_SHUTDOWN_WHEN_PLUGGED $(yes_no $noshut)
    setvar config_CONFIRM_SECONDS $splashdelay

    return 0

}

check_root()
{
    if [ "$(whoami)" != root ]
    then
        dialog \
            --backtitle "$backtitle" \
            --msgbox \
            "You must be root to run this configuration program" 0 0
        exit 1
    fi
}

activate_config()
{
    echo reconfig >/var/run/powerevents
}

main()
{

    case ${1:-} in
    -*) # we have no -options
        usage
        ;;
    =*) # =foo is just a direct event to the daemon,
        #  with the '=' removed.
        echo ${1#=} >/var/run/powerevents
        exit 0
        ;;
    esac

    if ! type dialog 2>/dev/null
    then
        (
        echo "${0##*/}: the 'dialog' program isn't available, quitting."
        echo "  Use a text editor to edit profiles under $CONFIGDIR,"
        echo "  and (re)activate them with: '${0##*/} profilename'"
        echo "  (Or use 'sudo yum install dialog' to install the package.)"
        ) >&2
        exit 1
    fi

    check_root

    if [ -f $CONFIGFILE ]
    then
	cp $CONFIGFILE $TMPCONFIG
    else
	touch $TMPCONFIG
    fi

    if edit_config $TMPCONFIG
    then
	mv $CONFIGFILE $CONFIGFILE.bak
	mv $TMPCONFIG $CONFIGFILE
	activate_config
    else
	echo No changes made.
    fi
}


main "$@"
